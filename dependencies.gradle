ext.applyCatalog = { dependencyResolutionManagement ->
    applyRepositories(dependencyResolutionManagement.&repositories)
    applyDependencies(dependencyResolutionManagement.&versionCatalogs)
}

def applyRepositories(repositories) {
    repositories {
        mavenCentral {
            content {
                includeGroupByRegex "org\\.jetbrains.*"
                includeGroupByRegex "com\\.squareup.*"
                includeGroupByRegex "org\\.json.*"
                includeGroupByRegex "org\\.junit.*"
                includeGroup "org.amshove.kluent"
                includeGroup "org.apiguardian"
                includeGroup "org.slf4j"
                includeGroup "org.objenesis"
                includeGroup "org.opentest4j"
                includeGroup "org.json"
                includeGroup "org.ow2"
                includeGroup "org.ow2.asm"
                includeGroup "org.hamcrest"
                includeGroup "org.sonatype"
                includeGroup "org.sonatype.oss"
                includeGroup "org.jacoco"
                includeGroup "org.xerial"
                includeGroup "net.java.dev.jna"
                includeGroup "net.bytebuddy"
                includeGroup "io.ktor"
                includeGroup "io.mockk"
                includeGroup "junit"
            }
        }
    }
}

def applyDependencies(catalogs) {
    catalogs {
        libs {
            version("kotlin", "1.7.20")
            version("coroutines", "1.6.4")
            version("sqldelight", "1.5.4")
            version("ktor", "2.1.3")
            version("junit-jupiter", "5.9.1")

            plugin("kotlin", "org.jetbrains.kotlin.jvm").versionRef("kotlin")
            plugin("kotlin-serialization", "org.jetbrains.kotlin.plugin.serialization").versionRef("kotlin")
            library("kotlin-serialization", "org.jetbrains.kotlinx", "kotlinx-serialization-json").version("1.4.1")

            library("kotlin-coroutines", "org.jetbrains.kotlinx", "kotlinx-coroutines-core").versionRef("coroutines")
            library("kotlin-coroutines-test", "org.jetbrains.kotlinx", "kotlinx-coroutines-test").versionRef("coroutines")
            library("kotlin-test", "org.jetbrains.kotlin", "kotlin-test-junit").versionRef("kotlin")

            plugin("sqldelight", "com.squareup.sqldelight").versionRef("sqldelight")
            library("sqldelight-test", "com.squareup.sqldelight", "sqlite-driver").versionRef("sqldelight")
            library("sqldelight-extensions", "com.squareup.sqldelight", "coroutines-extensions").versionRef("sqldelight")

            library("ktor", "io.ktor", "ktor-client-core").versionRef("ktor")
            library("ktor-serialization", "io.ktor", "ktor-client-serialization").versionRef("ktor")
            library("ktor-serialization-json", "io.ktor", "ktor-serialization-kotlinx-json").versionRef("ktor")
            library("ktor-logging", "io.ktor", "ktor-client-logging-jvm").versionRef("ktor")
            library("ktor-java", "io.ktor", "ktor-client-java").versionRef("ktor")
            library("ktor-content-negotiation", "io.ktor", "ktor-client-content-negotiation").versionRef("ktor")

            library("json", "org.json", "json").version("20220924")

            library("junit", "junit", "junit").version("4.13.2")
            library("junit-jupiter-api", "org.junit.jupiter", "junit-jupiter-api").versionRef("junit-jupiter")
            library("junit-jupiter-engine", "org.junit.jupiter", "junit-jupiter-engine").versionRef("junit-jupiter")
            library("kluent", "org.amshove.kluent", "kluent").version("1.72")
            library("mockk", "io.mockk", "mockk").version("1.13.2")
        }
    }
}
